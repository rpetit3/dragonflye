#!/usr/bin/env perl
# Dragonflye - A very fast flye!
# SYNOPSIS
#   De novo assembly pipeline for bacterial isolates with Nanopore reads
# USAGE
#   dragonflye [options] --outdir DIR --reads READS.fastq.gz
# GENERAL
#   --help          This help
#   --version       Print version and exit
#   --check         Check dependencies are installed
#   --seed N        Random seed to use (default: 42)
# INPUT
#   --reads XXX     Input Nanopore FASTQ (default: '')
#   --depth N       Sub-sample --reads to this depth. Disable with --depth 0 (default: 150)
#   --minreadlen N  Minimum read length. Disable with --minreadlength 0 (default: 1000)
#   --minquality N  Minimum average sequence quality. (default: OFF)
#   --gsize XXX     Estimated genome size eg. 3.2M <blank=AUTODETECT> (default: '')
# OUTPUT
#   --outdir XXX    Output folder (default: '')
#   --force         Force overwite of existing output folder (default: OFF)
#   --minlen N      Minimum contig length <0=AUTO> (default: 500)
#   --mincov n.nn   Minimum contig coverage <0=AUTO> (default: 2)
#   --namefmt XXX   Format of contig FASTA IDs in 'printf' style (default: 'contig%05d')
#   --keepfiles     Keep intermediate files (default: OFF)
# RESOURCES
#   --tmpdir XXX    Fast temporary directory (default: '')
#   --cpus N        Number of CPUs to use (0=ALL) (default: 8)
#   --ram n.nn      Try to keep RAM usage below this many GB (default: 16)
# ASSEMBLER
#   --assembler XXX Assembler: miniasm flye raven (default: 'flye')
#   --opts XXX      Extra assembler options in quotes eg. flye: '--interations' (default: '')
# POLISHER
#   --racon N       Number of polishing rounds to conduct with Racon (default: 1)
#   --medaka N      Number of polishing rounds to conduct with Medaka (requires --model) (default: 0)
#   --model XXX     The model to be used by Medaka, (Assumes 1 polishing round, if --medaka not used) (default: '')
#   --list_models   List the models available to Medaka (default: OFF)
# SHORT-READ POLISHER
#   --R1 XXX        Read 1 FASTQ to use for polishing (default: '')
#   --R2 XXX        Read 2 FASTQ to use for polishing (default: '')
# MODULES
#   --trim          Enable adaptor trimming (default: OFF)
#   --trimopts XXX  Extra porechop options in quotes eg. '--adapter_threshold 80' (default: '')
#   --nofilter      Disable read length filtering (default: OFF)
#   --nopolish      Disable assembly polishing (default: OFF)
# HOMEPAGE
#  https://github.com/rpetit3/dragonflye - Robert A Petit III
use strict;
use FindBin;
use File::Path qw(make_path remove_tree);
use File::Basename;
use File::Spec;
use File::Copy;
use File::Temp;
use List::Util qw(min max);
use English qw(-no_match_vars);
use Cwd qw(getcwd abs_path);
use POSIX qw(strftime);

# Globals
my $EXE = basename($PROGRAM_NAME);
my $VERSION = "1.0.9";
my $AUTHOR = "Robert A Petit III";
my $URL = "https://github.com/rpetit3/dragonflye";
my $APPDIR = abs_path( "$FindBin::RealBin/.." );
my $LOGTMP = File::Temp->new();
my $LOGFILE = $LOGTMP->filename;

my $MIN_BQ = 3;
my $MIN_MQ = 60;              # for pilon
my $MIN_RAM_GB = 2;           # for all tools

my @CMDLINE = ($0, @ARGV);    # save this for printing to log later
my $t0 = time;                # basetime to measure running duration

my %ASSEMBLER = ( map { $_ => 1 } qw(flye miniasm raven) );

my %VERSION = (
  'any2fasta'     => 'any2fasta -v 2>&1',
  'assembly-scan' => 'assembly-scan --version 2>&1',
  'bwa'           => 'bwa 2>&1 | grep Version:',
  'fastp'         => 'fastp --version 2>&1',
  'flye'          => 'flye --version 2>&1',
  'kmc'           => 'kmc -h 2>&1 | grep KMC',
  'medaka'        => 'medaka --version 2>&1',
  'miniasm'       => 'miniasm -V 2>&1',
  'minimap2'      => 'minimap2 --version 2>&1',
  'nanoq'         => 'nanoq --version 2>&1',
  'pigz'          => 'pigz --version 2>&1',
  'pilon'         => 'pilon --version 2>&1',
  'porechop'      => 'porechop --version 2>&1',
  'racon'         => 'racon --version 2>&1',
  'rasusa'        => 'rasusa --version 2>&1',
  'raven'         => 'raven --version 2>&1',
  'samtools'      => 'samtools 2>&1 | grep Version:',
  'samclip'       => 'samclip --version 2>&1',
  'seqtk'         => 'seqtk 2>&1 | grep Version',
);

# Hardware stats
my $CORES = num_cpus();
my $MEMORY = avail_ram_gb();

# Options
my(@Options, $version,
    $outdir, $force, $cpus, $tmpdir, $keepfiles, $namefmt,
    $kmers, $gsize, $READS, $assembler, $opts, $ram, $depth,
    $model, $list_models, $racon, $medaka, $R1, $R2, $pilon,
    $nofilter, $trim, $trimopts, $nopolish, $minreadlen,
    $minquality, $minlen, $mincov, $seed);
setOptions();

# Say hello
msg("Hello", $ENV{USER} || 'stranger');
msg("You ran: @CMDLINE");
msg("This is $EXE $VERSION");
msg("Written by $AUTHOR");
msg("Homepage is $URL");
msg("Operating system is $OSNAME");
msg("Perl version is $PERL_VERSION");
msg("Machine has $CORES CPU cores and $MEMORY GB RAM");

# Check options
if ($list_models) {
  available_models("");
}
elsif ($model) {
  available_models($model);
  if (!$medaka) {
    msg("Valid model provided, but number of Medaka rounds (--medaka) not given, assuming 1 round");
    $medaka = 1;
  }
} 
elsif ($medaka && !$model) {
  err("--medaka requires a model to be specified with --model");
}

$outdir or err("Please specify output folder with --outdir");
-r $READS or err("Can't read --reads $READS");
$gsize = $gsize ? parse_genome_size($gsize) : 0;  # 0 = autodetect later
$cpus ||= $CORES;  # if cpus==0 use all available
$cpus > 0 or err("Invalid --cpus $cpus");
$minreadlen >= 0 or err("Invalid --minreadlen $minreadlen");
$minquality >= 0 or err("Invalid --minquality $minquality");
$minlen >= 0 or err("Invalid --minlen $minlen");
$medaka >= 0 or err("Invalid --medaka $medaka");
$racon >= 0 or err("Invalid --racon $racon");
$pilon >= 0 or err("Invalid --pilon $pilon");
(defined $mincov && $mincov >= 0) or err("Please provide a non-negative value for --mincov");
$ram >= $MIN_RAM_GB or err("Invalid --ram $ram - need at least $MIN_RAM_GB");
$ram <= $MEMORY or err("Set --ram to $ram but machine only has $MEMORY GB");
my $ram_int = int($ram);  # an integer form of RAM, rounded down (some progs only accept integers)
my $half_ram = int($ram / 2);
$half_ram > 0 or err("Half RAM is too small, please set --ram > $ram");
my $sort_cpus = max( 1, int(0.25 * $cpus) );  # for samtools sort in pipe
$namefmt or err("Please provide a --namefmt for contig IDs");
$namefmt =~ m/%\d+d/ or err("--namefmt must have a %d placeholder for the contig counter");
exists $ASSEMBLER{$assembler} or err("Invalid --assembler '$assembler'");

if (length($R1) && length($R2)) {
  -r abs_path($R1) or err("Can't read --R1 $R1");
  -r abs_path($R2) or err("Can't read --R2 $R2");
  $R1 = abs_path($R1);
  $R2 = abs_path($R2);
} elsif (length($R1) || length($R2)) {
  err("--R1 and --R2 must be used together");
}

# Setup Minimap2 CPUs (it adds 1 to given value, so let's substract 1)
my $mm2_cpus = $cpus;
if ($cpus > 1) {
  $mm2_cpus = $cpus - 1;
}

# Check deps
check_deps();

# Make output folder
make_folder($outdir);
$outdir = abs_path($outdir);
$READS = abs_path($READS);

# Ensure we have a tempdir
$tmpdir ||= File::Temp->newdir(CLEANUP=>1);
msg("Using tempdir: $tmpdir");

msg("Changing into folder: $outdir");
my $cwd = getcwd();
chdir($outdir);

# Switch to permanent logfile
my $real_log = "$EXE.log";
copy($LOGFILE, $real_log);
$LOGFILE = $real_log;

# Get some read stats
msg("Collecting raw read statistics with 'seqtk'");
my $stat = read_stats($READS);
map { msg("Read stats: $_ = ".$stat->{$_}) } (keys %$stat);

# Estimate genome size (or use genome size provided) using KMC
unless ($gsize) {
  my $kmer = 21;
  my $minkc = 10;
  msg("Estimating genome size by counting unqiue $kmer-mers > frequency $minkc");
  my $tmpout = File::Temp->newdir();

  # @@@ KMC @@@
  run_cmd("kmc -sm -m$half_ram -t$cpus -k$kmer -ci$minkc \Q$READS\E $tmpout/kmc $tmpout 2>&1", "kmc");
  unlink <$tmpout/kmc.*>;
  # No. of unique counted k-mers       :      2054586
  my($bp) = grep { m/unique counted k/i } read_lines($LOGFILE);

  # we use \S not \d here because it could be in scientific form for mash
  $bp =~ m/(\S+)\s*$/ or err("Could not determine genome size from '$bp'");
  $gsize = int($1);
}
msg("Using genome size $gsize bp");


# Estimate sequencing depth
my $orig_depth = int( $stat->{'total_bp'} / $gsize );
msg("Estimated sequencing depth: ${orig_depth}x");

# Optionally filter reads by length and quality
if (!$nofilter and ($minreadlen > 0 or $minquality >0)) {
  msg("Filter reads based on length and/or quality");
  run_cmd("nanoq --min-len $minreadlen --input $READS --min-qual $minquality 2>&1 1> READS.filt.fq", "nanoq");
  run_cmd("pigz -f -p $cpus --fast READS.filt.fq 2>&1", "pigz");
  $READS = "READS.filt.fq.gz";
}
else {
  msg("No read filtering requested or necessary.");
}

# Optionally subsample the data to --depth, with rasusa
if ($depth and $depth > 0 and $orig_depth > 1.1 * $depth) {
  my $factor = sprintf "%.3f", $depth / $orig_depth;
  msg("Subsampling reads from ${orig_depth}x to ${depth}x");
  run_cmd("rasusa -i \Q$READS\E -c $depth -g $gsize -s $seed  2>&1 1> READS.sub.fq", "rasusa");
  run_cmd("pigz -f -p $cpus --fast READS.sub.fq 2>&1", "pigz");
  $READS = "READS.sub.fq.gz";
}
else {
  msg("No read depth reduction requested or necessary.");
}

# Get reads: if trimming, trim the originals into this folder, otherwise symlink
if ($trim) {
  msg("Trimming reads");
  run_cmd("porechop --input \Q$READS\E --threads $cpus --format fastq $trimopts 2>&1 1> READS.fq", "porechop");
  run_cmd("pigz -f -p $cpus --fast READS.fq 2>&1", "pigz");
}
else {
  msg("No read adapter trimming requested.");
  run_cmd("ln -sf \Q$READS\E READS.fq.gz 2>&1");
}

# Calculating read length distribution
my $RLEN = $stat->{'avg_len'};
msg("Average read length looks like $RLEN bp");
unless ($minlen) {
  $minlen = int( $RLEN / 2);
  msg("Automatically setting --minlen to $minlen");
}

# Running the assembler engine of chouce
msg("Assembling reads with '$assembler'");
my $FINAL_READS = "READS.fq.gz";
my $asm = "$assembler.fasta";  # assembler result file to process further
my $asmdir = $assembler;
my $asminfo = "";
remove_tree($asmdir) if -d $asmdir;

if ($assembler eq 'flye') {
  # https://github.com/fenderglass/Flye/blob/flye/docs/USAGE.md#-quick-usage
  my $read_type = "--nano-raw";
  # set polish rounds to 0 (-i 0)
  run_cmd("flye $read_type $FINAL_READS -g $gsize -i 0 --threads $cpus -o $asmdir $opts 2>&1", "flye");
  copy("$asmdir/assembly.fasta", $asm);
  $asminfo = "$assembler-info.txt";
  copy("$asmdir/assembly_info.txt", $asminfo);
}
elsif ($assembler eq 'miniasm') {
  make_folder($asmdir);
  run_cmd("minimap2 -x ava-ont -t $mm2_cpus $FINAL_READS $FINAL_READS 2>&1 1> $asmdir/minimap2-overlaps.paf", "miniasm - minimap2");
  run_cmd("miniasm -f $FINAL_READS $asmdir/minimap2-overlaps.paf 2>&1 1> $asmdir/assembly_graph.gfa", "miniasm - miniasm");
  run_cmd("any2fasta $asmdir/assembly_graph.gfa 2>&1 1> $asmdir/assembly.fasta", "miniasm - any2fasta");
  copy("$asmdir/assembly.fasta", $asm);
  $asminfo = "$asmdir/assembly_graph.gfa";
  msg("Contig coverage not available from Miniasm, skipping coverage check");
}
elsif ($assembler eq 'raven') {
  make_folder($asmdir);
  # Set polish rounds to 0 (-p 0)
  run_cmd("raven --threads $cpus -p 0 --graphical-fragment-assembly $asmdir/assembly_graph.gfa $opts $FINAL_READS 2>&1 1> $asmdir/assembly.fasta", "raven");
  copy("$asmdir/assembly.fasta", $asm);
  msg("Contig coverage not available from Raven, skipping coverage check");
}
else {
  err("Invalid --assembler '$assembler'");
}
# Check for zero output or failed assembly
err("Assembly failed - $asm has zero contigs!") unless -s $asm;

my $polish_info = "";
my $POLISHED_FASTA = $asm;
my $has_polished = 0;
unless ($nopolish) {
  copy($asm, "$assembler-unpolished.fasta");
  make_folder("$asmdir/polish");
  if ($racon) {
    # Polish with Racon
    msg("Polishing with Racon ($racon rounds)");
    make_folder("$asmdir/polish/racon");
    for (my $i = 1; $i <= $racon; $i++) {
      my $polish_dir = "$asmdir/polish/racon/$i";
      make_folder($polish_dir);
      run_cmd("minimap2 -t $mm2_cpus -x map-ont $POLISHED_FASTA $FINAL_READS 2>&1  1> $polish_dir/aligments.paf", "polishing - racon ($i of $racon)");
      run_cmd("racon -t $cpus $FINAL_READS $polish_dir/aligments.paf $POLISHED_FASTA 2>&1 1> $polish_dir/consensus.fasta", "polishing - racon ($i of $racon)");
      $POLISHED_FASTA = "$polish_dir/consensus.fasta";
    }
    $has_polished = 1;
    $polish_info .= "racon:${racon}x;";
  }

  if ($medaka) {
    # Polish with Medaka
    msg("Polishing with Medaka ($medaka rounds)");
    make_folder("$asmdir/polish/medaka");
    for (my $i = 1; $i <= $medaka; $i++) {
      my $polish_dir = "$asmdir/polish/medaka/$i";
      run_cmd("medaka_consensus -i $FINAL_READS -d $POLISHED_FASTA -o $polish_dir -m $model -t $cpus 2>&1", "polishing - medaka ($i of $medaka)");
      $POLISHED_FASTA = "$polish_dir/consensus.fasta";
    }
    $has_polished = 1;
    $polish_info .= "medaka:${medaka}x;";
  }

  if ($pilon >= 1 && length($R1) && length($R2)) {
    # polish using short reads
    # quick clean using fastp
    make_folder("$asmdir/polish/short_reads");
    my $polish_dir = "$asmdir/polish/short_reads";
    run_cmd("fastp --in1 $R1 --in2 $R2 --out1 $polish_dir/R1.fq.gz --out2 $polish_dir/R2.fq.gz --unpaired1 $polish_dir/u.fastq.gz --unpaired2 $polish_dir/u.fastq.gz", "short read polishing - fastp");
    move("fastp.html", $polish_dir);
    move("fastp.json", $polish_dir);

    # Polish using Pilon
    make_folder("$asmdir/polish/short_reads/pilon");
    my $pilon_dir = "$asmdir/polish/short_reads/pilon";
    my $sort_ram = int($half_ram * 1024 / $sort_cpus); # RAM per thread, in Mb

    msg("Polishing with Medaka ($pilon rounds)");
    for (my $i = 1; $i <= $pilon; $i++) {
      my $round_dir = "$pilon_dir/$i";
      my $BAM = "$round_dir/pilon-$i.bam";
      make_folder("$round_dir");

      # Create sorted BAM file
      run_cmd("bwa index $POLISHED_FASTA", "bwa-index", "short read polishing - bwa-index ($i of $pilon)");
      run_cmd("samtools faidx $POLISHED_FASTA", "faidx", "short read polishing - faidx ($i of $pilon)");
      run_cmd("(bwa mem -v 3 -x intractg -t $cpus $POLISHED_FASTA $polish_dir/R1.fq.gz $polish_dir/R2.fq.gz"
          ." | samclip --ref ${POLISHED_FASTA}.fai"
          ." | samtools sort --threads $sort_cpus -m ${sort_ram}m"
          ." --reference $POLISHED_FASTA -T $tmpdir -o $BAM)", "short read polishing - bwa+samtools-sort ($i of $pilon)");
      run_cmd("samtools index $BAM", "short read polishing - samtools-index ($i of $pilon)");

      msg("Polishing with Pilon");
      run_cmd("pilon --genome $POLISHED_FASTA --frags $BAM --minmq $MIN_MQ --minqual $MIN_BQ"
          ." --fix bases --outdir $round_dir --output pilon --threads $cpus --changes --mindepth 0.25", "short read polishing - pilon ($i of $pilon)");

      $POLISHED_FASTA = "$round_dir/pilon.fasta";
    }

    $has_polished = 1;
    $polish_info .= "pilon:short_reads;";
  }

  copy($POLISHED_FASTA, $asm);
  if ($has_polished) {
    $polish_info = "polish=$polish_info";
  }
  else {
    $polish_info = "polish=none";
  }

}
else {
  $polish_info = "polish=none";
  msg("User supplied --nopolish, so will not polish contigs.");
}

# Write final answer with nicer names
my $ncontigs = 0;
my $nbases = 0;
msg("Using assembly file '$POLISHED_FASTA' => '$asm'");
my $seq = read_fasta($asm);
my $info = read_info($asminfo, $assembler);
my $metadata = "$polish_info sw=$EXE-$asmdir/$VERSION date=".strftime("%Y%m%d", localtime);
my %len = map { ( $_ => length($seq->{$_}) ) } (keys %{$seq});
for my $id (sort { $len{$b} <=> $len{$a} } keys %{$seq}) {
  my $assembler_metadata = "";
  my $cov = 0;
  if ($assembler eq "flye") {
    if (exists $info->{$id}) {
      $cov = $info->{$id}{'cov'};
      $assembler_metadata .= " circular=" . $info->{$id}{'circ'};
    } else {
      foreach my $key (keys %$info) {
        my $start_id = "${key}_";
        if ($id =~ /^$start_id/) {
            msg("Matched ${key} to ${id}");
            $cov = $info->{$key}{'cov'};
            $assembler_metadata .= " circular=" . $info->{$key}{'circ'};
            last;
        } 
      }
    }
  }

  if ($len{$id} < $minlen) {
    msg("Removing short contig (< $minlen bp): $id");
    delete $seq->{$id};
  }
  elsif ($cov < $mincov && $assembler eq "flye") {
    msg("Removing low coverage contig (${cov}x < ${mincov}x): $id");
    delete $seq->{$id};
  }
  elsif ($seq->{$id} =~  m/^(.)\1+$/) {
    msg("Removing homopolymer-".$len{$id}."$1 contig: $id");
    delete $seq->{$id};
  }
  else {
    $ncontigs++;
    my $len = $len{$id};
    $nbases += $len;
    if ($cov > 0) {
      $cov = sprintf " cov=%.1f", $cov;
    } 
    else {
      $cov = "";
    }
    
    my $corr = "";
    my $newid = sprintf "$namefmt len=$len$cov$corr origname=$id $metadata$assembler_metadata", $ncontigs;
    $seq->{$newid} = $seq->{$id};
    delete $seq->{$id};
  }
}
write_fasta("contigs.fa", $seq);
my $delta = sprintf "%+.2f", (100.0*($nbases-$gsize)/$gsize);
msg("Assembly is $nbases, estimated genome size was $gsize ($delta%)");
msg("It contains $ncontigs (min=$minlen) contigs totalling $nbases bp.");
msg("Getting more stats now...");
run_cmd("assembly-scan --transpose contigs.fa 2>&1", "stats");

my $graph = '';
for my $f ('assembly_graph_with_scaffolds.gfa', 'assembly_graph.gfa', 'contigs.fastg', 'contigs.LastGraph') {
  my $g = "$asmdir/$f";
  if (-r $g) {
    $g =~ m/\.(\w+)$/; # get file extension
    $graph = "$assembler.$1";
    if ($has_polished) {
      $graph = "$assembler-unpolished.$1";
    }
    msg("Using genome graph file '$g' => '$graph'");
    move($g, $graph);
    last;
  }
}
$graph or msg("Note: $assembler does not produce a graph file");

# Cleanup time!
unless ($keepfiles) {
  # subsampled, filtered and symlinked original reads
  unlink glob("*q.gz");
  # assemblers
  remove_tree( $asmdir );
  # raven
  unlink glob("*.cereal");
}

# Say our goodbyes
my $wallsecs = time - $t0;
my($mins,$secs) = ( int($wallsecs/60), $wallsecs % 60 );
msg("Walltime used: $mins min $secs sec");

msg("Results in: $outdir");
msg("Final assembly graph: $outdir/$graph") if $graph;
msg("Final assembly contigs: $outdir/contigs.fa");

# Inspiration
my @motd = (
  "Dragonflye is heavily based off Shovill (https://github.com/tseemann/shovill), the Illumina counterpart",
  "Dragonfly facts were provided by the Smithsonian Magazine",
  "Dragonfly fossils have been found with wingspans up to two feet (61cm)!",
  "Dragonfly larva eat just about anything: tadpoles, mosquitoes, fish, other insect larvae and even each other! ",
  "Dragonflies are super accurate hunters (>90% capture rate), hopefully it inspires super accurate assemblies!",
  "Remember, an assembly is just a _hypothesis_ of the original sequence! ~ Torsten Seemann",
  "Use Bandage to inspect the .gfa/.fastg assembly graph: https://rrwick.github.io/Bandage/",
  "Found a bug in $EXE? Post it at $URL/issues",
  "Have a suggestion for $EXE? Tell me at $URL/issues",
  "The $EXE manual is at $URL/blob/master/README.md",
  "Did you know? $EXE is a play on the words 'Dragon' and 'Flye' ('dragonflye')",
  "If you know your genome size, use --gsize to skip the estimation step",
);
srand( $PROCESS_ID + $t0 ); # seed
msg( $motd[ int(rand(scalar(@motd))) ] );
msg("Done.");

# return to original folder
chdir($cwd);
exit(0);

#----------------------------------------------------------------------
sub check_deps {
  my($exit) = @_;
  # Check we have the required binaries
  my @exe = sort keys %VERSION;
  #push @exe, ($OSNAME eq 'linux' ? 'vmstat' : 'sysctl');
  for my $exe (@exe) {
    my $fullexe = find_exe($exe);
    if ($fullexe) {
      my $ver = '(version unknown)';
      if (my $vcmd = $VERSION{$exe}) {
        ($ver) = qx($vcmd);
        chomp $ver;
        $ver or err("Could not determine version of '$exe' via '$vcmd'");
      }
      msg("Using $exe - $fullexe | $ver");
    }
    else {
      err("Could not find '$exe' - please install it.");
    }
  }
  exit(0) if $exit;
}

#----------------------------------------------------------------------
sub available_models {
  my($model, $exitcode) = @_;
  my $model_verified = 0;
  if ($model) {
    msg("Verifying input model (--model): $model");
  }
  else {
    msg("Generating a list of available Medaka models:");
  }
  my ($available) = qx(medaka_consensus -h 2>&1 | grep Choices:);
  chomp $available;
  $available =~ s/\s+Choices: //g;
  $available =~ s/\.//g;
  my @models = split(' ', $available);
  foreach my $m (@models) {
    if ($model) {
      if ($model eq $m) {
        $model_verified = 1;
      }
    }
    else {
      msg("\t$m");
    }
  }

  if ($model) {
    if ($model_verified) {
      msg("Model $model verified!");
    } 
    else {
      msg("Unable to verify model '$model', please check spelling and try again.");
      msg("Available Medaka models include:");
      foreach my $m (@models) {
        msg("\t$m");
      }
      exit(1);
    }
  }
  else {
    exit(0)
  }
}

#----------------------------------------------------------------------
sub count_changes {
  my($fname) = @_;
  my @diffs = read_lines($fname);
  my $diff = {};
  my $total=0;
  foreach (@diffs) {
    # NODE_2_length_262460_cov_10.3709:152516 NODE_2_length_262460_cov_10.3709_pilon:152516 A T
    # we want the 2nd contig name
    next unless m/ (\S+?):\d+(-\d+)? /;
    $diff->{$1}++;
    $total++;
  }
  msg("Repaired", scalar(keys %$diff), "contigs from $asm at $total positions.");
  return $diff;
}

#----------------------------------------------------------------------
sub read_stats {
  my($READS) = @_;
  my $sf = File::Temp->new();
  my $stat;
  # we use MIN_BQ to get an idea of what it would be after quality clipping
  run_cmd("seqtk fqchk -q$MIN_BQ \Q$READS\E 2>&1 1>".$sf->filename);
  my @row = read_lines($sf->filename);
  unlink $sf->filename;
  for my $tag ('min_len', 'max_len', 'avg_len') {
    $row[0] =~ m/$tag:\s*(\d+(\.\d+)?);/ or err("Can't parse $tag from: $row[0]");
    $stat->{$tag} = int( $1 + 0.5 );
  }
  $row[2] =~ m/^ALL\s+(\d+)/ or err("Can't parse ALL #bases from: $row[2]");
  $stat->{'total_bp'} = $1;
  return $stat;
}

#----------------------------------------------------------------------
sub make_folder {
  my($outdir) = @_;
  $outdir or err("make_folder() provided undefined path");
  if (-d $outdir) {
    if ($force) {
      msg("Forced overwrite of existing --outdir $outdir");
    }
    else {
      err("Folder '$outdir' already exists. Try using --force");
    }
  }
  else {
    make_path($outdir);
  }
}

#----------------------------------------------------------------------
sub parse_genome_size {
  my($s) = @_;
  my %mult = ('G'=>1E9,'M'=>1E6,'K'=>1E3);
  $s =~ m/^([\d\.]+)([GMK])?$/i or die "Couldn't parse '$s'";
  my $bp = $1;
  $bp = $bp * $mult{uc($2)} if defined $2;
  return $bp;
}

#----------------------------------------------------------------------
sub run_cmd {
  my($cmd, $label) = @_;

  if (!defined $label) {
    $cmd =~ m/^(\S+)/;
    $label ||= $1;
  }
  $label = "[$label] " if defined $label and $label ne '';

  $cmd .= " | sed 's/^/$label/' | tee -a $LOGFILE";
  msg("Running: $cmd");
  system("bash -o pipefail -c \"$cmd\"")==0 or err("Error running command: $cmd");
}

#----------------------------------------------------------------------
sub find_exe {
  my($bin) = shift;
  for my $dir (File::Spec->path) {
    my $exe = File::Spec->catfile($dir, $bin);
    return $exe if -x $exe;
  }
  return;
}

#----------------------------------------------------------------------
sub msg {
  my $msg = "[$EXE] @_\n";
  print STDERR $msg;
  open my $log, '>>', $LOGFILE;
  print $log $msg;
  close $log;
}

#----------------------------------------------------------------------
sub err {
  msg(@_);
  exit(1);
}

#----------------------------------------------------------------------
sub num_cpus {
  my($num)= qx(getconf _NPROCESSORS_ONLN); # POSIX
  chomp $num;
  return $num || 1;
}

#----------------------------------------------------------------------
sub avail_ram_gb {
  my $ram=0;
  if ($^O eq 'linux') {
    my($line) = grep { m/^MemTotal/ } qx(cat /proc/meminfo);
    $line =~ m/(\d+)/ or err("Could not parse MemTotal from /proc/meminfo");
    $ram = $1 / 1024 / 1024; # convert KB to GB
  }
  elsif ($^O eq 'darwin') {    # macOS
    my($line) = qx(sysctl hw.memsize);
    $line =~ m/(\d+)/ or err("Could not parse RAM from sysctl hw.memsize");
    $ram = $1 / 1024 / 1024 / 1024; # convert Bytes to GB
  }
  else {
    err("Do not know how to determine RAM on platform:", $^O);
  }
  $ram && $ram > 0 or err("Problem determining available RAM");
  return sprintf("%.2f", $ram);
}

#----------------------------------------------------------------------
sub version {
  print "$EXE $VERSION\n";
  exit(0);
}

#----------------------------------------------------------------------
sub read_fasta {
  my($fname) = @_;
  my $seq;
  my $id;
  # Bioperl is too heavyweight - that's my excuse for this
  open my $FASTA, '<', $fname or err("Could not open $fname");
  while (my $line = <$FASTA>) {
    chomp $line;
    if ($line =~ m/^>(.*)$/) {
      $id = $1;
      $id =~ s/\s/_/g;
      $seq->{$id} = '';
    }
    else {
      $seq->{$id} .= $line;
    }
  }
  close $FASTA;
  return $seq;
}

#----------------------------------------------------------------------
sub read_info {
  # Assembly info file, assembler name
  my($fname, $aname) = @_;
  my $info;
  if (-s $fname) {
    open my $INFO_FH, '<', $fname or err("Could not open $fname");
    while (my $line = <$INFO_FH>) {
      chomp $line;
      my @cols = split(/\t/, $line);
      if ($aname eq "flye") {
        # Colnames
        # 0:seq_name, 1:length, 2:cov., 3:circ., 4:repeat, 5:mult., 6:alt_group, 7:graph_path
        next if $line =~ /^\#/;
        $info->{$cols[0]} = {
          'len' => $cols[1],
          'cov' => $cols[2],
          'circ' => $cols[3],
          'repeat' => $cols[4],
          'multi' => $cols[5],
          'alt_group' => $cols[6],
          'graph_path' => $cols[7]
        };
      }
      elsif ($aname eq "miniasm") {
        # The coverage is in the assembly graph
        # cols
        # 0:info, 1:contig is, 2:sequence, 3:coverage
        if ($line =~ /^S/) {
          if($cols[3] =~ m/dp:f:(\d+.\d+)/) {
            $info->{$cols[1]} = {'cov' => $1};
          }
        }
      }
    }
    close $INFO_FH;
  }
  return $info;
}

#----------------------------------------------------------------------
sub write_fasta {
  my($fname, $seq) = @_;
  open my $FASTA, '>', $fname or err("Could not write to $fname");
  for my $id (sort { $a cmp $b } keys %{$seq}) {
    print $FASTA ">$id\n";
    # break contig in 60 characters per line
    my @line = ($seq->{$id} =~ m/(.{1,60})/gs);
    print $FASTA (map { $_."\n" } @line);
  }
  close $FASTA;
}

#----------------------------------------------------------------------
sub read_lines {
  my($fname) = @_;
  open my $FILE, '<', $fname or err("Could not open $fname");
  my @lines = <$FILE>;
  close $FILE;
  return @lines
}

#----------------------------------------------------------------------
sub write_lines {
  my($fname, @lines) = @_;
  open my $FILE, '>', $fname or err("Could not write to $fname");
  print $FILE @lines;
  close $FILE;
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    "GENERAL",
    {OPT=>"help",       VAR=>\&usage,                    DESC=>"This help"},
    {OPT=>"version!",   VAR=>\&version,                  DESC=>"Print version and exit"},
    {OPT=>"check!",     VAR=>\&check_deps,               DESC=>"Check dependencies are installed"},
    {OPT=>"seed=i",     VAR=>\$seed,      DEFAULT=>42,   DESC=>"Random seed to use"},
    "INPUT",
    {OPT=>"reads=s",      VAR=>\$READS,      DEFAULT=>'',   DESC=>"Input Nanopore FASTQ"},
    {OPT=>"depth=i",      VAR=>\$depth,      DEFAULT=>150,  DESC=>"Sub-sample --reads to this depth. Disable with --depth 0"},
    {OPT=>"minreadlen=i", VAR=>\$minreadlen, DEFAULT=>1000, DESC=>"Minimum read length. Disable with --minreadlength 0"},
    {OPT=>"minquality=i", VAR=>\$minquality, DEFAULT=>0,    DESC=>"Minimum average sequence quality. (default: OFF)"},
    {OPT=>"gsize=s",      VAR=>\$gsize,      DEFAULT=>'',   DESC=>"Estimated genome size eg. 3.2M <blank=AUTODETECT>"},
    "OUTPUT",
    {OPT=>"outdir=s",   VAR=>\$outdir,    DEFAULT=>'',   DESC=>"Output folder"},
    {OPT=>"force!",     VAR=>\$force,     DEFAULT=>0,    DESC=>"Force overwite of existing output folder"},
    {OPT=>"minlen=i",   VAR=>\$minlen,    DEFAULT=>500,  DESC=>"Minimum contig length <0=AUTO>"},
    {OPT=>"mincov=f",   VAR=>\$mincov,    DEFAULT=>2,    DESC=>"Minimum contig coverage <0=AUTO>"},
    {OPT=>"namefmt=s",  VAR=>\$namefmt,   DEFAULT=>'contig%05d', DESC=>"Format of contig FASTA IDs in 'printf' style"},
    {OPT=>"keepfiles!", VAR=>\$keepfiles, DEFAULT=>0,    DESC=>"Keep intermediate files"},
    "RESOURCES",
    {OPT=>"tmpdir=s",   VAR=>\$tmpdir,    DEFAULT=>$ENV{TMPDIR} || '', DESC=>"Fast temporary directory"},
    {OPT=>"cpus=i",     VAR=>\$cpus,      DEFAULT=>$ENV{DRAGONFLYE_CPUS} || min(8,$CORES), DESC=>"Number of CPUs to use (0=ALL)"},
    {OPT=>"ram=f",      VAR=>\$ram,       DEFAULT=>$ENV{DRAGONFLYE_RAM} || min(16,$MEMORY),  DESC=>"Try to keep RAM usage below this many GB"},
    "ASSEMBLER",
    {OPT=>"assembler=s",VAR=>\$assembler, DEFAULT=>$ENV{DRAGONFLYE_ASSEMBLER} || 'flye', DESC=>"Assembler: ".join(' ', keys %ASSEMBLER) },
    {OPT=>"opts=s",     VAR=>\$opts,      DEFAULT=>'',   DESC=>"Extra assembler options in quotes eg. flye: '--interations'"},
    "POLISHER",
    {OPT=>"racon=i",      VAR=>\$racon,       DEFAULT=>1,    DESC=>"Number of polishing rounds to conduct with Racon"},
    {OPT=>"medaka=i",     VAR=>\$medaka,      DEFAULT=>0,    DESC=>"Number of polishing rounds to conduct with Medaka (requires --model)"},
    {OPT=>"model=s",      VAR=>\$model,       DEFAULT=>'',   DESC=>"The model to be used by Medaka, (Assumes 1 polishing round, if --medaka not used)"},
    {OPT=>"list_models!", VAR=>\$list_models, DEFAULT=>0,    DESC=>"List the models available to Medaka"},
    "SHORT-READ POLISHER",
    {OPT=>"pilon=i",    VAR=>\$pilon,     DEFAULT=>1,    DESC=>"Number of polishing rounds to conduct with Pilon (requires --R1 and --R2)"},
    {OPT=>"R1=s",       VAR=>\$R1,        DEFAULT=>'',   DESC=>"Read 1 FASTQ to use for polishing"},
    {OPT=>"R2=s",       VAR=>\$R2,        DEFAULT=>'',   DESC=>"Read 2 FASTQ to use for polishing"},
    "MODULES",
    {OPT=>"trim!",      VAR=>\$trim,      DEFAULT=>0,    DESC=>"Enable adaptor trimming"},
    {OPT=>"trimopts=s", VAR=>\$trimopts,  DEFAULT=>'',   DESC=>"Extra porechop options in quotes eg. '--adapter_threshold 80'"},
    {OPT=>"nofilter!",  VAR=>\$nofilter,  DEFAULT=>0,    DESC=>"Disable read length filtering"},
    {OPT=>"nopolish!",  VAR=>\$nopolish,  DEFAULT=>0,    DESC=>"Disable assembly polishing"}
  );

  ! @ARGV && usage(1);

  &GetOptions(map {$_->{OPT}, $_->{VAR}} grep { ref } @Options) || usage(1);

  # Now setup default values.
  foreach (@Options) {
    if (ref $_ && defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

#----------------------------------------------------------------------
sub usage {
  my($exitcode) = @_;
  $exitcode = 0 if $exitcode eq 'help'; # what gets passed by getopt func ref
  $exitcode ||= 0;

  select STDERR if $exitcode; # write to STDERR if exitcode is error
  print "Dragonflye (v$VERSION) - A very fast flye\n\n";
  print "SYNOPSIS\n  De novo assembly pipeline for bacterial isolates with Nanopore reads\n";
  print "USAGE\n  $EXE [options] --outdir DIR --reads READS.fastq.gz\n";
  foreach (@Options) {
    if (ref) {
      my $def = $_->{DEFAULT};
      if (defined $def) {
        $def = 'OFF' if $_->{OPT} =~ m/!$/;
        $def = "'$def'" if $_->{OPT} =~ m/=s$/;
        $def = " (default: $def)";
      }
      $_->{OPT} =~ s/!$//;
      $_->{OPT} =~ s/=s$/ XXX/;
      $_->{OPT} =~ s/=i$/ N/;
      $_->{OPT} =~ s/=f$/ n.nn/;
      printf "  --%-13s %s%s\n", $_->{OPT}, $_->{DESC}, $def;
    }
    else {
      print "$_\n"; # Subheadings in the help output
    }
  }
  print "HOMEPAGE\n  $URL - $AUTHOR\n";

  exit($exitcode);
}

#----------------------------------------------------------------------
